(defproject buyme-aggregation-backend "0.1.0-SNAPSHOT"
  :description "FIXME: write description"
  :url "http://example.com/FIXME"
  :license {:name "Eclipse Public License"
            :url  "http://www.eclipse.org/legal/epl-v10.html"}

  :plugins [[lein-environ "1.0.3"]
            [migratus-lein "0.4.3"]
            [lein-cljsbuild "1.1.4"]]

  :dependencies [[org.clojure/clojure "1.8.0"]
                 [org.clojure/tools.namespace "0.2.11"]
                 [org.clojure/algo.generic "0.1.2"]

                 [environ "1.0.3"]

                 [http-kit "2.2.0"]
                 [cheshire "5.6.3"]
                 [http-kit.fake "0.2.1"]

                 [com.cemerick/url "0.1.1"]
                 [liberator "0.14.1"]
                 [ring/ring-core "1.5.0"]
                 [ring/ring-devel "1.5.0"]
                 [ring/ring-jetty-adapter "1.5.0"]
                 [bidi "2.0.8"]
                 [jarohen/chime "0.1.9"]
                 [clj-time "0.11.0"]

                 [org.postgresql/postgresql "9.4.1209"]
                 [conman "0.5.8"]
                 [migratus "0.8.32"]
                 [robert/hooke "1.3.0"]

                 ;; logging
                 [com.taoensso/timbre "4.7.0"]
                 [com.fzakaria/slf4j-timbre "0.3.2"]        ;; req'd by migratus


                 [mount "0.1.10"]
                 [prismatic/schema "1.1.2"]


                 [compojure "1.0.2"]                        ;; req'd by liberator.dev

                 ;; lambda
                 [uswitch/lambada "0.1.2"]
                 [amazonica "0.3.77" :exclusions [com.amazonaws/aws-java-sdk
                                                  com.amazonaws/amazon-kinesis-client]]
                 [com.amazonaws/aws-java-sdk-core "1.11.57"]
                 [com.amazonaws/aws-java-sdk-lambda "1.11.57"]]

  ;; generate uberjars
  ;; `lein clean; lein with-profile lambda uberjar`
  ;; `lein clean; lein with-profile core uberjar`
  :profiles {:uberjar {}

             :lambda  {:dependencies []
                       :uberjar-name "lambda.jar"
                       :main         lambda.core
                       :aot          [lambda.core]}


             :core    {:main         ^:skip-aot buyme-aggregation-backend.core
                       :uberjar-name "main.jar"}}


  ;; hack-- .lein-env is generated by lein-environ from profiles.clj
  :migratus ~(let [{:keys [database-subname database-user database-password]} (-> ".lein-env" slurp read-string)]
               {:store         :database
                :migration-dir "migrations"
                :db            {:classname   "org.postgresql.Driver"
                                :subprotocol "postgresql"
                                :subname     database-subname
                                :user        database-user
                                :password    database-password}})

  :target-path "target/%s"
  :repl-options {:init-ns user})
